#summary a step-by-step guide to downloading & installing v4l4j
#labels Featured

=Quick Start=
For the impatient, here are a few instructions that will get you started, assuming you are using Ubuntu or Debian. You have two options to download v4l4j:I suggest you first try the latest stable version, available as a tar archive from the [http://code.google.com/p/v4l4j/downloads/list Downloads tab] above. The second option, which is to download the latest SVN version, should be used only if the stable version does not work for you. To download the latest SVN version, use :
{{{
svn co http://v4l4j.googlecode.com/svn/v4l4j/trunk v4l4j
}}}

Go to the v4l4j source directory and do the following to compile and test v4l4j:
{{{
sudo apt-get install sun-java6-jdk libjpeg-dev build-essential ant
ant test-gui
}}}
This will download v4l4j and its dependencies, compile the package and run a test application that displays a video stream from /dev/video0 by default. To use another video device, add `-Dtest.device=/dev/videoXX` to the last line. If things go wrong, then read on. Otherwise, you can generate the Java documentation with `ant javadoc`, and write your own application using v4l4j.

=Download=
Choose on of the following method to download v4l4j:
 * Latest snapshot
The latest snapshot of v4l4j can be downloaded using:
{{{
svn co http://v4l4j.googlecode.com/svn/v4l4j/trunk v4l4j
}}}

 * Latest stable version
The latest stable version of v4l4j is available as a tar archive from the "Downloads" tab.


=Requirements=
v4l4j requires the following:
 * a supported V4L video source (webcam, capture card, tuner card). 
 * Sun JAVA JDK 1.6 (it wont compile with earlier versions and it *must* be a JDK !!!). Download it from [http://java.sun.com here], install it somewhere and note the location. In Ubuntu/Debian, this can be done with:
{{{
sudo apt-get install sun-java6-jdk
}}}
 * the development files of libjpeg, as well as libjpeg itself. In Ubuntu/Debian, this can be done using
{{{
sudo apt-get install libjpeg-dev
}}}
 * make, gcc and Apache Ant (to build the classes and JNI library). In Ubuntu/Debian, this can be done using
{{{
sudo apt-get install build-essential ant
}}}

=Build=
First, make sure that you have all the dependencies installed (see previous Requirements paragraph). To compile the JNI library and java classes, run `ant all` in v4l4j/. This will first compile libv4l and the JNI code, and then link both of these to produce the JNI library libv4l4j. It will then compile the java classes and pack them in a JAR file. Both the JNI library libv4l4j.so and the JAR file v4l4j.jar are copied in the top-level directory.
If you get this error:
{{{
v4l4j_FrameGrabber.c:25:17: error: jni.h: No such file or directory
}}}
edit v4l4j/src/Makefile and change the top line `JDK_HOME=/usr/lib/jvm/java-6-sun` to point to the directory where you previously installed the JDK.
If you get this error:
{{{
v4l4j_FrameGrabber.c:27:21: error: jpeglib.h: No such file or directory
}}}
you havent installed the development files on libjpeg. See the previous paragraph on how to fix this.

=Installing=
In order to use the v4l4j package from your java application, you must do two things:
 * First, make sure JNI library libv4l4j.so can be loaded by the JVM. This is done by either:
   * installing libv4l4j.so in the JRE's lib/ directory. This is achieved by running `ant install-jnilib` as root in v4l4j/. It can be uninstalled with `ant uninstall-jnilib` as root later on.
   * OR setting the shell variable LD_LIBRARY_PATH to point to the directory where libv4l4j.so resides before running your program, for example: `LD_LIBRARY_PATH=path/to/libv4l4j_dir java my.package.MyApp` . The same can be achieved by setting the java.library.path property using: `-Djava.library.path=path/to/libv4l4j_dir` when invoking the JVM, for example: `java -Djava.library.path=path/to/libv4l4j_dir my.package.MyApp`
 * Second, make sure v4l4j.jar is in your application's classpath.

You can generate the Java documentation for this package by running `ant javadoc`. By default, the generated pages will be in doc/.

=Testing=
Three example applications are shipped with v4l4j:
 * The first one simply captures frames for 10 seconds and print the frame rate. Run it with `ant test-fps`
 * The second one displays the video stream in a window. Run it with `ant test-gui`.
 * The third one prints information about the video device itself. Run it with `ant deviceInfo`

By default, these tests will use /dev/video0 as the video device (assumed to be a webcam), and the capture resolution is set to 640x480 . You can change any of these settings by editing the values at the end of the "build.properties" file, or provide those values on the ant command line:
  * `-Dtest.device=` changes the video device,
  * `-Dtest.width=` changes the width of captured frames,
  * `-Dtest.height=` changes the height of captured frames,
  * `-Dtest.channel=` changes the input used for capture (0 for webcams),
  * `-Dtest.standard=` changes the video standard used during capture (0 for webcams, 1 for PAL, 2 for SECAM and 3 for NTSC).
  * `-Dtest.inFormat=` changes the capture image format, ie the format images are captured in from Video4Linux (used only by `ant test-fps`). The value must be an image format supported by your video device, as listed in `ant deviceInfo`.
  * `-Dtest.outFormat=` changes the output image format, ie the format image will be in when handed out by v4l4j (used only by `ant test-fps`). Acceptable values are:
    * 0: raw format - v4l4j will not do any format conversion and images will be handed out in their original capture format.
    * 1: JPEG format 
    * 2: RGB24 format
    * 3: BGR24 format
    * 4: YUV420 format
    * 5: YVU420 format

=Debugging=
You can compile v4l4j with extra debug output by running `ant clean all-debug` in v4l4j/. Make sure you also uninstall v4l4j (if previously installed) using `sudo ant uninstall`. Check the the [Troubleshooting troubleshooting page] for help on solving common issues.

=Issues=
Feedback is is greatly appreciated to expand the list of platforms and video devices v4l4j has been successfully tested with. Feedback, issues and queries can be emailed to the [http://groups.google.com/group/v4l4j v4l4j mailing list] along with a description of what went wrong (or right) and what hardware you run v4l4j on. Before posting, check the [Troubleshooting troubleshooting] page for more information.